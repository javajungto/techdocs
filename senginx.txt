senginx는 기존 nginx에 추가 기능과 security가 포함된 버전.
기존 nginx에서 컴파일이 필요했던 기능들(caching,ssl등)도 포함되어 있고, naxsi나 modsecurity가 통합되어 있음.

-------------------------------------------------------------------------------------------------------------------------------------------------
What is SEnginx ?
-------------------------------------------------------------------------------------------------------------------------------------------------
SENginx open source project is launched by Network Security Division of Neusoft Corporation ( http://security.neusoft.com/ )

http://www.senginx.org

SEnginx (Security Enhanced NGINX) is a variant of nginx.

senginx = web security features + application delivery

-------------------------------------------------------------------------------------------------------------------------------------------------
SEnginx Features = all features of original nginx + Application delivery (web server) + Web Security 
-------------------------------------------------------------------------------------------------------------------------------------------------
all features of original nginx
+ 
Application delivery (web server) 
- tcp proxy and load balancing : nginx_tcp_proxy_module 
- Enhanced "if" Directive in Rewrite Module 
- Dynamic DNS Resolve in Upstream (proxy_pass directive:dynamic_resolve, dynamic_fail_timeout, dynamic_fallback) : SEnginx can support resolving DNS at run time. 
- Proxy HTTPS Client Cerificate
- Load Balancing Algorithm
  . Fastest Load Balancing Algorithm : shorter response time
  . Fair Load Balancing Algorithm 
- Session Persistence 
- Caching Based on MIME Type 
- Server Health Monitor : engine's check module. 
+
Web Security
- IP Access Behavior Module : limit_req , robot mitigation
 . ip_behavior_zone zone=abc:10m sample_base=10 sample_cycle=2s; (This defines a 10MB size zone, sample cycle is two seconds and the miminum valid request number is 10. )
 . server { ip_behavior zone=abc type=sensitive_url; } (Enable zone abc on a server and set the mode to sensitive url accessing behavior detecting.)
 .ip_behavior_sensitive
 .$insensitive_percent
- Conditional limit_req module 
- HTTP Robot Mitigation 
- Dynamic IP Blacklist
- User-Agent Whitelist with DNS Reverse Resolve.
- Cookie Poisonig
- Web Defacement
- Protection of Web Vulnerabilities (Integrated Naxsi and ModSecurity)
 .SQL Injection
 .Cross Site Scripting
 .Directory Traversal
 .Remote File Inclusion
 .Evading Tricks
- Secure Session Mechanism 
- NetEye Security Layer

installation

yum groupinstall "development tools"
yum install pcre pcre-devel
yum install openssl-devel

cd /usr/local/src
wget http://senginx.org/download/senginx-1.6.2.tar.gz
tar xvfz senginx-1.6.2.tar.gz
./se-configure.sh --prefix=/usr/local/senginx-1.6.2 && make && make install

-------------------
IP Behavior
-------------------
The IP behavior module is used to monitor user's access behavior to a server.
This feature is mainly used with other security features such as conditional limit_req and robot mitigatioin, 
thus SEnginx could detect and take actions against L7 DDoS attacks or scanning.
At current stage, this feature only supports senetive URL access detection, other access behavior detection will be implemented in the feature.

This feature is available since version1.5.10

Directives
ip_behavior_zone
Syntax : ip_behavior_zone zone=name:size sample_base=times sample_cycle=cycle;
Default:
Context:http

Defining an IP behavior zone, you need to specify 3 parameters:
 zone=name:size, name is zone's name, size means how much memory this zone will use,unit is in m,k,etc:
 sample_base=times, specifies the number of the request for a valid sample, times must be unsigned integer:
 sample_cycle=cycle, specifies the cyclog of the sampling, unit could be s(for second) and m(for minute)

Example
ip_behavior_zone zone=abc:10m sample_base=10 sample_cycle=2s;

This defines a 10MB size zone, sample cycle is two seconds and the miminum valid request number is 10.

-------------------
Statistics
-------------------
Synopsis
The ngx_http_statistics module has the functionality that collects traffic and attack statistics in SEnginx.
Currently the following items are supported:

Traffic Statistics
- Current Request, how many requests are in progress.
- Total Request, which means since SEnginx launches, how many request have been processed by the server.
- Sent, which means how many bytes are sent by the server
- Recvd, which means how many bytes are received by the server
Traffic statistics only available on the server side, upstream side is not supported yet.

Attack Statistics
- SQL Injection
- Cross Site Scripting
- Remote File Inclusion
- Dir Traversal
- Evading Tricks
- File Uploads Threat
- Cookie Poisoning
- Web Defacement
- Robot Mitigation Challenges
Whether the attack types above are available or not depends on whether the corresponding feature is enabled in the configuration or not.
Currently attacks reported by ModSecurity are not suported.

Directive
statistics_zone
Syntax : statistics_zone size

example)
http://192.168.0.18/stats => Only JSON format is supported at current stage:

http {
    ...
    statistics_zone 10m; <== add

    server {
        listen       80;
        server_name  localhost;
        virtual_server_name localhost; <== add
        ...
        
        location /stats {        <== add
                statistics;      <== add 
        }

-------------------------------------------------------------------------
example
-------------------------------------------------------------------------

worker_processes  4;

events {
    worker_connections  2048;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    limit_req_zone $binary_remote_addr zone=cc:10m rate=10r/s;           <===
    ip_behavior_zone zone=abc:10m sample_base=10 sample_cycle=2s;        <===

    statistics_zone 10m;                                                 <===

    server {
        listen       80;
        server_name  localhost;
	      virtual_server_name localhost;                                   <===
	      ip_behavior zone=abc type=sensitive_url;                         <===

        location / {
	          limit_req zone=cc burst=1 condition=$cond;                   <===
            ip_behavior_sensitive;                                       <===

            ifall ($insensitive_percent >= 0) ($insensitive_percent < 5){ <===
		          set $cond 1;                                                <===
	          }

	          proxy_pass http://x.x.x.x;
            proxy_read_timeout 300;
            proxy_redirect off;
            proxy_buffering off; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

	      location /stats {     <===
		        statistics;       <===
	      }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
}

-------------------------------------------------------------------------
naxsi example
-------------------------------------------------------------------------

worker_processes  4;

events {
    worker_connections  2048;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    limit_req_zone $binary_remote_addr zone=cc:10m rate=10r/s;
    ip_behavior_zone zone=abc:10m sample_base=10 sample_cycle=2s;

    statistics_zone 10m;

    include /usr/local/senginx-1.6.2/naxsi/naxsi_config/naxsi_core.rules;

    server {
        listen       80;
        server_name  localhost;
	virtual_server_name localhost;
	ip_behavior zone=abc type=sensitive_url;

        location / {
	    limit_req zone=cc burst=1 condition=$cond;
            ip_behavior_sensitive;

            ifall ($insensitive_percent >= 0) ($insensitive_percent < 5){
		set $cond 1;
	    }

	    proxy_pass http://x.x.x.x;
            proxy_read_timeout 300;
            proxy_redirect off;
            proxy_buffering off; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	    SecRulesEnabled;
	     
	    DeniedUrl "/RequestDenied";
	      
	    include wl.conf;
	       
	    CheckRule "$XSS >= 4" BLOCK;
	    CheckRule "$TRAVERSAL >= 4" BLOCK;
	    CheckRule "$EVADE >= 8" BLOCK;
	    CheckRule "$UPLOAD >= 8" BLOCK;
	    CheckRule "$RFI >= 8" BLOCK;
	    CheckRule "$SQL >= 8" BLOCK;

        }

	location /stats {
		statistics;
	}

	location /RequestDenied {
	    return 403;
	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}

-------------------------------------------------------------------------
naxsi reporting example 
-------------------------------------------------------------------------

[root@centos6-1 ~]# cd /usr/local/senginx-1.6.2/naxsi/nx_util/

python nx_util.py -c nx_util.conf -v3 -l /usr/local/senginx-1.6.2/logs/*error.log -H /usr/local/senginx-1.6.2/html/report/report.html


worker_processes  4;

events {
    worker_connections  2048;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    limit_req_zone $binary_remote_addr zone=cc:10m rate=10r/s;
    ip_behavior_zone zone=abc:10m sample_base=10 sample_cycle=2s;

    statistics_zone 10m;

    include /usr/local/senginx-1.6.2/naxsi/naxsi_config/naxsi_core.rules;

    server {
        listen       80;
        server_name  localhost;
	virtual_server_name localhost;
	ip_behavior zone=abc type=sensitive_url;

        location / {
	    limit_req zone=cc burst=1 condition=$cond;
            ip_behavior_sensitive;

            ifall ($insensitive_percent >= 0) ($insensitive_percent < 5){
		set $cond 1;
	    }

	    proxy_pass http://x.x.x.x;
            proxy_read_timeout 300;
            proxy_redirect off;
            proxy_buffering off; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	    SecRulesEnabled;
	     
	    DeniedUrl "/RequestDenied";
	      
	    include wl.conf;
	       
	    CheckRule "$XSS >= 4" BLOCK;
	    CheckRule "$TRAVERSAL >= 4" BLOCK;
	    CheckRule "$EVADE >= 8" BLOCK;
	    CheckRule "$UPLOAD >= 8" BLOCK;
	    CheckRule "$RFI >= 8" BLOCK;
	    CheckRule "$SQL >= 8" BLOCK;

        }

	location /stats {
		statistics;
	}

	location /RequestDenied {
	    return 403;
	}

	location /report {
		root html;
		index report.html;	    
	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
}

-------------------------------------------------------------------------
fail2ban / 참조:https://wiki.deimos.fr/NAXSI:_integrate_a_WAF_for_Nginx
-------------------------------------------------------------------------
naxsi는 LearningMode로 두고, 룰셋에 필터링 되는 로그만 남겨, 이 로그를 fail2ban에서 ban처리함. 

#yum list "*epel*"
#yum install epel-release
#yum list "*fail2ban*"
#yum install fail2ban
#cp -a /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
#view /etc/fail2ban/jail.local 
#cd /etc/fail2ban/filter.d/
#view nginx-naxsi.conf
  
[INCLUDES]
before = common.conf
[Definition]
failregex = NAXSI_FMT: ip=<HOST>
ignoreregex =

#view /etc/fail2ban/jail.local 
...
[nginx-naxsi]
enabled = true
port = http,https
filter = nginx-naxsi
logpath = /usr/local/senginx-1.6.2/logs/*error.log
maxretry = 1
...

#/etc/init.d/fail2ban restart

테스트 공격
on 192.168.0.100
입력값에 ' having a=a-- 

on 192.168.0.18에서 iptables 확인 

[root@centos6-1 fail2ban]# iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
f2b-nginx-naxsi  tcp  --  0.0.0.0/0            0.0.0.0/0           multiport dports 80,443 

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         

Chain f2b-nginx-naxsi (1 references)
target     prot opt source               destination         
REJECT     all  --  192.168.0.100        0.0.0.0/0           reject-with icmp-port-unreachable 
RETURN     all  --  0.0.0.0/0            0.0.0.0/0           

아래 시간에 대한 조정 및 정확한 해석이 필요함. 

* bantime = 600 <== 10분동안 공격ip 접근 금지(ban) 됨. 
* findTime = 600 

로그확인
[root@centos6-1 fail2ban]# tail -f /var/log/messages 
Sep  4 08:09:01 centos6-1 fail2ban.filter[1794]: INFO Added logfile = /usr/local/senginx-1.6.2/logs/error.log
Sep  4 08:09:01 centos6-1 fail2ban.filter[1794]: INFO Set maxRetry = 1
Sep  4 08:09:01 centos6-1 fail2ban.filter[1794]: INFO Set jail log file encoding to UTF-8
Sep  4 08:09:01 centos6-1 fail2ban.actions[1794]: INFO Set banTime = 600
Sep  4 08:09:01 centos6-1 fail2ban.filter[1794]: INFO Set findtime = 600
Sep  4 08:09:01 centos6-1 fail2ban.jail[1794]: INFO Jail 'nginx-naxsi' started
Sep  4 08:10:03 centos6-1 fail2ban.filter[1794]: INFO [nginx-naxsi] Found 192.168.0.100
Sep  4 08:10:03 centos6-1 fail2ban.filter[1794]: INFO [nginx-naxsi] Found 192.168.0.100
Sep  4 08:10:03 centos6-1 fail2ban.filter[1794]: INFO [nginx-naxsi] Found 192.168.0.100
Sep  4 08:10:03 centos6-1 fail2ban.actions[1794]: NOTICE [nginx-naxsi] Ban 192.168.0.100
Sep  4 08:20:04 centos6-1 fail2ban.actions[1794]: NOTICE [nginx-naxsi] Unban 192.168.0.100

수동으로 unban(풀기)

[root@centos6-1 fail2ban]# fail2ban-client status
Status
|- Number of jail:	1
`- Jail list:	nginx-naxsi

#fail2ban-client set nginx-naxsi unbanip 192.168.0.100

수동으로 ban(금지)
#fail2ban-client set nginx-naxsi banip 192.168.0.100
192.168.0.100

-------------------------------------------------------------------------
Reference
-------------------------------------------------------------------------

https://wiki.deimos.fr/NAXSI:_integrate_a_WAF_for_Nginx

http://www.senginx.org/en/index.php/IP_Blacklist
