#---------------------------------------------------------------------------
# jenkins
#---------------------------------------------------------------------------

[root@localhost ~]# useradd jenkins
[root@localhost ~]# mkdir /home/jenkins_home
[root@localhost ~]# chown -R jenkins:jenkins /home/jenkins
[root@localhost ~]# docker run -d -p 8080:8080 -v /home/jenkins:/var/jenkins --name jenkins jenkins/jenkins
[root@localhost ~]# docker logs jenkins

tcp://192.168.0.22:2375

firewall-cmd --zone=public --add-port=2375/tcp
https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-rocky-linux-9

blueocean ui plugin 설치
Jenkins 관리 > Plugin Manager >

---
pipeline
품질 점검이나 소프트웨어 인도와 같은 부분을 자동으로 수행하도록 하는 일련의 과정
스크립트을 연결해서 작성.

stage
step

pipeline {
    agent any
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

---

pipeline {
    agent any
    stages {
        stage('First Stage') {
            steps {
                echo 'Step 1. Hello World'
            }
        }
        stage('Second Stage') {
            steps {
                echo 'Step 2. Second time Hello'
                echo 'Step 3, Third time Hello'
            }
        }
    }
}

---

커밋 파이프라인 : 리포지터리로 커밋(또는 git으로 push)한 후 빌드 결과를 보고하는 파이프라인
코드가 변경될 때마다 파이프라인이 실행되기 때문에 빌드 시간은 5분을 넘지 않아야 하고,
리소스 사용도 합리적인 수준이어야 한다.

gitlab_tk

update-crypto-policies --set LEGACY

ssh-keygen -t rsa -b 2048 -C "jwpark@......co.kr"

ssh-keygen -C jenkins@jwpark

#---------------------------------------------------------------------------
# install_docker.sh
#---------------------------------------------------------------------------
#!/bin/bash
#https://docs.docker.com/engine/install/centos/
yum clean all &&
yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine &&
yum install -y yum-utils rdate &&
rdate -s time.bora.net &&
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo &&
yum install docker-ce docker-ce-cli containerd.io -y &&
systemctl start docker &&
docker run hello-world
