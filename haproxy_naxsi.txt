http://blog.exceliance.fr/2012/10/16/high-performance-waf-platform-with-naxsi-and-haproxy/

naxsi, a Web Application Firewall module for nginx.

NAXSI means Nginx Anti Xss & SQL Injection.

참조 : http://www.kisa.or.kr/uploadfile/201312/201312161355109566.pdf
---------------------------------------------------------
XSS(크로스 사이트 스크립팅) 공격 종류 및 대응 방법
---------------------------------------------------------
- 크로스 사이트 스크립팅 취약점은, 취약한 웹 사이트에 악성 스크립트를 포함 할수 있는 손쉬운 방법 중 하나. 
- 공격자는 내부 사용자의 합법적인 인터넷 사용을 악용하는 방식으로 공격방법을 변경하게 됨.
  즉, 사용자가 정상적으로 웹사이트를 접속할때 또는 이메일을 읽을 때 공격자가 여기에 악성 스크립트를 포함하여 개인의 pc를 감염시키고, 조직 내부 시스템에 침투하여 원하는 정보를 탈취해 가고 있다.
- XSS 공격은 웹 응용에 존재하는 취약점을 기반으로 웹 서버와 클라이언트간 통신 방식인 HTTP 프로토콜 동작과정 중에 발생한다. 
- XSS 공격은 브라우저로 전달되는 데이터에 악성 스크립트가 포함되어 개인의 브라우저에서 실행되면서 해킹을 하는 것이며, 이 공격용 악성 스크립트는 공격자가 웹 서버에 구현된 웹애플리케이션의 XSS 취약점을 이용하여 서버 측 또는 URL에 미리 삽입을 해놓은 것이다. 
- 비교적 쉽게 공격할수 있으며 웹 어플리케이션 개발 시 제거되지 않아 매우 광범위하게 분포되고 있다고 할수 있다. 

---------------------------------------------------------
XSS 공격 방법(종류)
---------------------------------------------------------
1. 저장 XSS 공격
- 접속자가 많은 웹 사이트를 대상으로 공격자가 XSS 취약점이 있는 웹 서버에 공격용 스크립트를 입력시켜 놓으면, 방문자가 악성 스크립트가 삽입되어 있는 페이지를 읽는 순간 방문자의 브라우저를 공격하는 방식.

2. 반사 XSS 공격
- 악성 스크립트가 포함된 URL을 사용자가 클릭하도록 유도하여 URL을 클릭하면 클라이언트를 공격하는 것.
  서버가 외부에서 입력받은 값을 받아 브라우저에게 응답할때 전송하는 과정에서 입력되는 변수의 위험한 문자를 사용자에게 그대로 돌려주면서 발생한다. 

3. DOM  기반 XSS공격
- DOM환경에서 악성 URL을 통해 사용자의 브라우저를 공격하는 것. 
스피어 피싱(Spear phishing) 
- 모르는 사람에게 무작위로 피싱 이메일을 보내는 것이 아니라 특정 조직을 공격하기 위해 공격 대상 조직의 중요 시스템 및 정보와 관련 있는 특정인을 대상으로 피싱 이메일을 보내는 방식.

---------------------------------------------------------
XSS 공겨의 피해
---------------------------------------------------------

1. 쿠키 정보/세션ID 획득 
쿠키
- 웹서버가 HTTP 헤더 중 set-Cookie 필드로 브라우저에게 보내는 4KB 이하의 작은 텍스트 파일이며 사용자가 웹 사이트를 이용하는 동안 사용자 브라우저에 저장된다. 

세션쿠키
- 사용자가 웹사이트를 읽거나 방문하는 동안에만 임시로 메모리에 존재하는 쿠키이다. 
  쿠키 생성시 쿠키 만료시기 또는 유효성 기간이 설정되어 있지 않은 경우에 세션 쿠키가 만들어진다. 
  브라우저에서는 사용자가 브라우저를 종료하면 세션 쿠키를 삭제한다. 
  웹 애플리케이션이 세션ID를 쿠키에 포함하는 경우 XSS공격을 통해, 클라이언트의 합법적인 세션ID를 획득하여 불법적으로 정상 사용자로 가장할 수 있다. 

2. 시스템 관리자 권한 획득
- XSS 취약점을 이용하여 사용자 브라우저 취약점을 공격하여 PC를 완전히 통제할 수도 있다. 
  공격자는 XSS 취약점 있는 웹 서버에 다양한 악성 데이터를 포함시켜 놓은 후, 사용자의 브라우저가 악성 데이터를 실행하는 경우 자신의 브라우저에 있는 제로데이 취약점 또는 패치되지 않은 취약점을 공격하는 공격 코드가 실행되면서 사용자 시스템을 완전히 통제할 수 있다. 회사 등 조직의 개인의 PC가 해킹되는 경우, 조직의 내부 시스템으로 이동하여 내부의 중요 정보를 탈취하는 공격으로 이어질 수 있다. 

3. 악성코드 다운로드
- 사용자가 악성 스크립트가 있는 URL을 클릭하도록 유도하여 악성 프로그램을 다운로드 받는 사이트로 redirect하거나, 트로이목마 프로그램을 다운로드하여 설치할 수 있다. 

---------------------------------------------------------
XSS 취약점 예방 기술
---------------------------------------------------------
많은 조직에서 XSS공격을 대응하기 위해 웹방화벽(WAF)을 도입하여 방어를 하고 있으나, 대부분의 웹 방화벽은 시그너쳐 기반의 XSS공격만을 탐지하고 있다. 하지만 특정 문자열을 탐지하는 기술은 쉽게 우회가 가능하여 방어가 효과적이지는 못하다. 웹개발자들이 일일이 수동적으로 위험한 문자를 필터링 및 인코딩 하는 것은 현실적으로 불가능하다.

1. 입,출력 값 검증 및 무효화
XSS 취약점을 근본적으로 제거하기 위해서는 스크립트 등 해킹에 사용될 수 있는 코딩에 사용되는 입력 및 출력 값에 대해서 검증하고 무효화시켜야 한다. 입력 값에 대한 유효성 검사는 데이터가 입력되기 전에 가능하면, 입력 데이터에 대한 길이,문자,형식 및 사업적 규칙 유효성을 검사해야 한다. 
출력값을 무료화하기 위해서는 태그문자등 위험한 문자 입력시 문자참조(HTML entity 예: < --> &lt;)로 필터링하고, 서버에서 브라우저로 전송 시 문자를 인코딩하는 것. 
위험문자의 경우 출력값을 이스케이핑 해야 한다. 

보안 라이브러리
1) AntiXSS 
마이크로소프트 개발한 공개용 XSS취약점 예방 라이브러리.(ASP.net 4.5이후 버전에서만 사용 가능)

2) OWASP ESAPI라이브러리 
포괄적인 보안을 위해 웹 응용 취약점을 대응할 수 있는 오픈소스 ESAPI라이브러리를 개발하여 제공하고 있다. 
총 14개의 API가 있으며, 이 중 XSS 취약점을 예방하기 위해 API는 validator와 encoder가 있다. 

3) 브라우저 확장 프로그램
사용자가 XSS공격을 예방할 수 있는 프로그램도 있다. 
NoScript는 파이어폭스 등 모질라 기반의 브라우저에서 실행되는 오픈 소스 확장 프로그램.

결론
개발단계에서 XSS 취약점을 제거하지 않고서는 다양한 XSS 형태의 공격과 우회 공격을 방어하기는 힘들다. 
XSS 취약점을 근본적으로 해결하기 위해서는 애플리케이션 개발단계에서 위험한 데이터 입,출력을 검증하고 인코딩하는 방법을 선택해야 한다. 


워터링 홀 공격
- 공격대상 조직의 특징을 빅데이타로 조사하여 구성원들이 많이 방문하는 웹 사이트에 공격 코드를 삽입하여, 공격대상 조직을 감염시키고 침투하는 방법. 


----------------------------------------------------------------------------
haproxy-1.5-dev21
----------------------------------------------------------------------------

#cd /usr/local/src/
#wget http://haproxy.1wt.eu/download/1.5/src/devel/haproxy-1.5-dev21.tar.gz
#tar xvfz haproxy-1.5-dev21.tar.gz
#cd haproxy-1.5-dev21
#make TARGET=linux26 CPU=x86_64
#make install target=linux26
#which haproxy
#cp haproxy /usr/sbin/
#ls -l /etc/haproxy/
#haproxy -f /etc/haproxy.cfg  -D

----------------------------------------------------------------------------
nginx-1.4.6 / naxsi-0.53-2
----------------------------------------------------------------------------

#yum groupinstall "development tools"
#yum install pcre pcre-devel zlib zlib-devel
#cd /usr/local/src/
#wget https://github.com/nbs-system/naxsi/archive/0.53-2.tar.gz
(wget https://github.com/nbs-system/naxsi/archive/0.55rc2.tar.gz)
#wget http://nginx.org/download/nginx-1.4.6.tar.gz
(wget http://nginx.org/download/nginx-1.9.9.tar.gz)

#tar xvfz nginx-1.4.6.tar.gz
#mv 0.53-2.tar.gz naxsi-core-0.53-2.tar.gz
#tar xvfz naxsi-core-0.53-2.tar.gz
#ln -s nginx-1.4.6 nginx
#ln -s naxsi-0.53-2 naxsi
#cd nginx
#./configure --conf-path=/etc/nginx/nginx.conf --add-module=../naxsi/naxsi_src/ --error-log-path=/var/log/nginx/err --prefix=/opt/nginx --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module
#make && make install
#cd /etc/nginx/
#cp /usr/local/src/naxsi/naxsi_config/naxsi_core.rules .
#touch /tmp/naxsi_rules.tmp
#mkdir /etc/nginx/sites-enabled
#view /etc/nginx/nginx.conf
#cd /etc/nginx/
#cp nginx.conf nginx.conf.orig
#view nginx.conf
#cd /etc/nginx/sites-enabled/
#view default

#view /etc/nginx/test.rules

LearningMode; #Enables learning mode
SecRulesEnabled;
#SecRulesDisabled;
DeniedUrl "/RequestDenied";

include "/tmp/naxsi_rules.tmp";

## check rules
CheckRule "$SQL >= 8" BLOCK;
CheckRule "$RFI >= 8" BLOCK;
CheckRule "$TRAVERSAL >= 4" BLOCK;
CheckRule "$EVADE >= 4" BLOCK;
CheckRule "$XSS >= 8" BLOCK;

#useradd nginx -s /bin/false -d /var/lib/nginx -c "Nginx user"

#/opt/nginx/sbin/nginx
#/opt/nginx/sbin/nginx –s stop
#/opt/nginx/sbin/nginx –s reloadtail -f /var/log/nginx/*logview /etc/nginx/nginx.conf
#View /etc/nginx/sites-enabled/default

--------------------------
cat nginx.conf
--------------------------
user  nginx;
worker_processes  4;
worker_rlimit_core 500M;
working_directory /tmp/;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  2048;
    use epoll;
    # multi_accept on;
}

http {
    include       /etc/nginx/naxsi_core.rules;
    include       /etc/nginx/mime.types;
    server_names_hash_bucket_size 128;
    access_log    /var/log/nginx/access.log;

    sendfile           on;
    keepalive_timeout  65;
    tcp_nodelay        on;

    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    include /etc/nginx/sites-enabled/*;



        ##
        # nginx-naxsi config
        ##
        # Uncomment it if you installed nginx-naxsi
        ##
 
        include /etc/nginx/naxsi_core.rules;
}

--------------------------
cat /etc/nginx/naxsi.rules 
--------------------------
#LearningMode; #Enables learning mode
SecRulesEnabled;
#SecRulesDisabled;
DeniedUrl "/RequestDenied";

#include "/tmp/naxsi_rules.tmp";
include "/etc/nginx/wl.conf";
#include "dokuwiki.rules";
#include "drupal.rules";
#include "rutorrent.rules";
#include "wordpress.rules";

## check rules
CheckRule "$SQL >= 8" BLOCK;
CheckRule "$RFI >= 8" BLOCK;
CheckRule "$TRAVERSAL >= 4" BLOCK;
CheckRule "$EVADE >= 4" BLOCK;
CheckRule "$XSS >= 8" BLOCK;

--------------------------
cat /etc/nginx/wl.conf 
--------------------------
#BasicRule negative "rx:^$" "msg:empty" "mz:$HEADERS_VAR:cookie" "s:BLOCK";

--------------------------
cat /etc/nginx/naxsi_core.rules 
--------------------------
##################################
## INTERNAL RULES IDS:1-999     ##
##################################
#@MainRule "msg:weird request, unable to parse" id:1;
#@MainRule "msg:request too big, stored on disk and not parsed" id:2;
#@MainRule "msg:invalid hex encoding, null bytes" id:10;
#@MainRule "msg:unknown content-type" id:11;
#@MainRule "msg:invalid formatted url" id:12;
#@MainRule "msg:invalid POST format" id:13;
#@MainRule "msg:invalid POST boundary" id:14;

##################################
## SQL Injections IDs:1000-1099 ##
##################################
MainRule "rx:select|union|update|delete|insert|table|from|ascii|hex|unhex|drop" "msg:sql keywords" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:4" id:1000;
MainRule "str:\"" "msg:double quote" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:8,$XSS:8" id:1001;
MainRule "str:0x" "msg:0x, possible hex encoding" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:2" id:1002;
## Hardcore rules
MainRule "str:/*" "msg:mysql comment (/*)" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:8" id:1003;
MainRule "str:*/" "msg:mysql comment (*/)" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:8" id:1004;
MainRule "str:|" "msg:mysql keyword (|)"  "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:8" id:1005;
MainRule "str:&&" "msg:mysql keyword (&&)" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:8" id:1006;
## end of hardcore rules
MainRule "str:--" "msg:mysql comment (--)" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:4" id:1007;
MainRule "str:;" "msg:; in stuff" "mz:BODY|URL|ARGS" "s:$SQL:4,$XSS:8" id:1008;
MainRule "str:=" "msg:equal in var, probable sql/xss" "mz:ARGS|BODY" "s:$SQL:2" id:1009;
MainRule "str:(" "msg:parenthesis, probable sql/xss" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$SQL:4,$XSS:8" id:1010;
MainRule "str:)" "msg:parenthesis, probable sql/xss" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$SQL:4,$XSS:8" id:1011;
MainRule "str:'" "msg:simple quote" "mz:ARGS|BODY|URL|$HEADERS_VAR:Cookie" "s:$SQL:4,$XSS:8" id:1013;
MainRule "str:," "msg:, in stuff" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:4" id:1015;
MainRule "str:#" "msg:mysql comment (#)" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$SQL:4" id:1016;

###############################
## OBVIOUS RFI IDs:1100-1199 ##
###############################
MainRule "str:http://" "msg:http:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1100;
MainRule "str:https://" "msg:https:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1101;
MainRule "str:ftp://" "msg:ftp:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1102;
MainRule "str:php://" "msg:php:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1103;
MainRule "str:sftp://" "msg:sftp:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1104;
MainRule "str:zlib://" "msg:zlib:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1105;
MainRule "str:data://" "msg:data:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1106;
MainRule "str:glob://" "msg:glob:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1107;
MainRule "str:phar://" "msg:phar:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1108;
MainRule "str:file://" "msg:file:// scheme" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$RFI:8" id:1109;

#######################################
## Directory traversal IDs:1200-1299 ##
#######################################                                          
MainRule "str:.." "msg:double dot" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:4" id:1200;
MainRule "str:/etc/passwd" "msg:obvious probe" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:4" id:1202;
MainRule "str:c:\\" "msg:obvious windows path" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:4" id:1203;
MainRule "str:cmd.exe" "msg:obvious probe" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:4" id:1204;
MainRule "str:\\" "msg:backslash" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:4" id:1205;
#MainRule "str:/" "msg:slash in args" "mz:ARGS|BODY|$HEADERS_VAR:Cookie" "s:$TRAVERSAL:2" id:1206;

########################################
## Cross Site Scripting IDs:1300-1399 ##
########################################
MainRule "str:<" "msg:html open tag" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$XSS:8" id:1302;
MainRule "str:>" "msg:html close tag" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$XSS:8" id:1303;
MainRule "str:[" "msg:[, possible js" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$XSS:4" id:1310;
MainRule "str:]" "msg:], possible js" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$XSS:4" id:1311;
MainRule "str:~" "msg:~ character" "mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie" "s:$XSS:4" id:1312;
MainRule "str:`"  "msg:grave accent !" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$XSS:8" id:1314;
MainRule "rx:%[2|3]."  "msg:double encoding !" "mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie" "s:$XSS:8" id:1315;

####################################
## Evading tricks IDs: 1400-1500 ##
####################################
MainRule "str:&#" "msg: utf7/8 encoding" "mz:ARGS|BODY|URL|$HEADERS_VAR:Cookie" "s:$EVADE:4" id:1400;
MainRule "str:%U" "msg: M$ encoding" "mz:ARGS|BODY|URL|$HEADERS_VAR:Cookie" "s:$EVADE:4" id:1401;
MainRule negative "rx:multipart/form-data|application/x-www-form-urlencoded" "msg:Content is neither mulipart/x-www-form.." "mz:$HEADERS_VAR:Content-type" "s:$EVADE:4" id:1402;

#############################
## File uploads: 1500-1600 ##
#############################
MainRule "rx:.ph|.asp|.ht" "msg:asp/php file upload!" "mz:FILE_EXT" "s:$UPLOAD:8" id:1500;

--------------------------
 cat /etc/nginx/sites-enabled/proxyip_x.x.x.x.conf 
--------------------------

server {
 proxy_set_header Proxy-Connection "";
 listen           proxyip_x.x.x.x:80;
 access_log       /var/log/nginx/naxsi_access.log;
 error_log        /var/log/nginx/naxsi_error.log debug;

 client_max_body_size    6M;
 client_body_buffer_size 1024k;

 location / {
   include    /etc/nginx/naxsi.rules;
   proxy_pass http://backendip_y.y.y.y:80/;

   proxy_read_timeout 300;
   proxy_redirect off;
   proxy_buffering off;
   proxy_set_header        Host            $host;
   proxy_set_header        X-Real-IP       $remote_addr;
   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;

  }

#This location is where, in learning mode, to-be-forbidden requests
# will be "copied"
#In non-learning mode, it's where denied request will land, so feel free to
# do whatever you want,
#return 418 I'm a teapot, forward to a custom webpage with
#a captcha to help track false-positives (see contrib for that),
#whatever you want to do !

 error_page 403 /403.html;
 location = /403.html {
  root /opt/nginx/html;
  internal;
 }

 location /RequestDenied {
     return 418;
     #proxy_pass http://127.0.0.1:4242;
   }
}


