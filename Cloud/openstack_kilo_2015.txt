OpenStack
DevStack
PackStack by RDO
TryStack

Reference : https://www.rdoproject.org/Quickstart

On centos 7.x

partition LVM (320G)
/ 289G
swap 8G
minimal install

#systemctl stop NetworkManager
#systemctl disable NetworkManager
#systemctl enable network

-#ifdown enp0s25

/etc/init.d/network restart

- #systemctl restart network
- #systemctl status network.service

#view ifcfg-enp0s25
#ip addr show
#yum update -y
#yum install -y https://rdoproject.org/repos/rdo-release.rpm
#yum install -y openstack-packstack
#packstack --allinone

yum -y update && yum -y install https://rdoproject.org/repos/rdo-release.rpm && yum -y install openstack-packstack && packstack --allinone

view /etc/httpd/conf.d/15-horizon_vhost.conf
...
ServerAlias .......
....

http://..../dashboard

id/pwd : cat /root/keystonerc_admin 

dashboard > Compute > 접근&보안 > 키페어 생성 ( ex: keypari2.pem )
dashboard > Compute > 접근&보안 > 시큐리티 그룹 > default 규칙관리 > 규칙추가 22 추가 

#view /etc/sysconfig/network-scripts/ifcfg-br-ex (new)
DEVICE=br-ex
DEVICETYPE=ovs
TYPE=OVSBridge
BOOTPROTO=static
IPADDR=192.168.0.150 # Old eth0 IP since we want the network restart to not
                       # kill the connection, otherwise pick something outside your dhcp range
NETMASK=255.255.255.0  # your netmask
GATEWAY=192.168.0.1  # your gateway
DNS1=168.126.63.1     # your nameserver
ONBOOT=yes

#view view /etc/sysconfig/network-scripts/ifcfg-enp0s25 (modify)
DEVICE=enp0s25
TYPE=OVSPort
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
ONBOOT=yes

#openstack-config --set /etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini ovs bridge_mappings extnet:br-ex
#openstack-config --set /etc/neutron/plugin.ini ml2 type_drivers vxlan,flat,vlan

# reboot

or, alternatively:
 
# service network restart
# service neutron-openvswitch-agent restart
# service neutron-server restart

--------------------------------------------
Add an image 
--------------------------------------------
dashboard > Compute > 이미지 > 이미지생성 

image resources 
=> https://www.rdoproject.org/Image_resources

이름 : centos6
이미지위치 :http://cloud.centos.org/centos/6/images/CentOS-6-x86_64-GenericCloud-20141129_01.qcow2
* 필요에 따라 공용 체크 

--------------------------------------------
demo계정으로 로그인 
--------------------------------------------
접근&보안 : 키페어 생성 (ex: keypair3.pem)
시큐리티그룹 : default > 규칙관리(포트 22추가 )

--------------------------------------------
admin 계정으로 로그인 
--------------------------------------------
> router1 > 인터페이스 삭제
> router1 삭제 

neutron net-delete public

openstack-config --set /etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini ovs bridge_mappings extnet:br-ex
openstack-config --set /etc/neutron/plugin.ini ml2 type_drivers vxlan,flat,vlan
cat keystonerc_admin 
neutron net-create external_network --provider:network_type flat --provider:physical_network extnet  --router:external --shared
neutron subnet-create --name public_subnet --enable_dhcp=False --allocation-pool=start=192.168.0.16,end=192.168.0.31 --gateway=192.168.0.1 external_network 192.168.0.0/24
neutron router-create router1
neutron router-gateway-set router1 external_network
neutron router-interface-add router1 private_subnet

시스템 > 네트워크 > public 삭제 
네트워크 생성
이름 : public
프로젝트 : admin
네트워크타입:flat
물리적인네트워크:default
외부네트워크 : 체크 

위에서 생성한 네트워크 이름 클릭
서브넷 생성 
서브넷이름 : public_subnet
네트워크주소 : 192.168.0.0/24
게이트웨이IP:192.168.0.1
DHCP할당:체크
Pools할당:192.168.0.16,192.168.0.31

--------------------------------------------
demo계정으로 로그인 & router생성 
--------------------------------------------
프로젝트>네트워크>라우터 생성
라우터이름  : router1
게이트웨이 설정
외부네트워크 public
> 인터페이스 추가 
서브넷 : private:10.0.0/24(private_subnet) 

--------------------------------------------
Launch the instance
--------------------------------------------
dashboard > Compute > image > centos6 > 인스턴스구동 > 
인스턴스이름 : test1
Flavor : m1.small
private network 

--------------------------------------------
Floating IP range ( 생략) 
--------------------------------------------
=>https://www.rdoproject.org/Floating_IP_range

With nova-network
source /root/keystonerc_admin
nova  floating-ip-bulk-delete 10.3.4.0/22 (this is the hard-coded range in packstack)
nova floating-ip-bulk-create CORRECT-RANGE (in the above example, this would be 192.168.1.56/29)
nova-manage floating list (to see your new list of floating IPs)

With Neutron
source /root/keystonerc_admin
neutron net-create public --router:external
neutron subnet-create public2 192.168.0.0/24 --name vlan2 --enable_dhcp=False --allocation_pool start=192.168.0.16,end=192.168.0.31 --gateway 192.168.0.1 (use your network gateway here - change the IP addresses in the allocation range to match what is available on your network)
neutron router-create router1 (router1 has to be replaced by the name of your router)
neutron router-gateway-set $router_id $vlan_id (use your router id and previous created vlan id)
neutron floatingip-create public (repeat as necessary)

--------------------------------------------
cinder
--------------------------------------------
source keystonerc_admin (or source keystonerc_demo)
cinder list
cinder create --display-name myVolume 1
cinder show myVolume

--------------------------------------------
swift
--------------------------------------------
swift stat
swift upload myfiles r.txt
swift download myfiles

--------------------------------------------
windows image
--------------------------------------------
Reference
=> https://poolsidemenace.wordpress.com/2011/06/16/porting-windows-to-openstack/

on promox
created window image to .qcow2 with virtio

copy the window image file to openstack server

glance image-create --name 'Windows 2008 R2 Standard x64 update' --disk-format qcow2 --container-format bare --is-public true < vm-105-disk-1.qcow2

Reference
=> https://www.rdoproject.org/Image_resources

glance image-create --name 'Fedora 20 x86_64' --disk-format qcow2 --container-format bare --is-public true \
--copy-from http://cloud.fedoraproject.org/fedora-20.x86_64.qcow2

--------------------------------------------
backup
--------------------------------------------
# mysqldump --opt --all-databases > openstack.sql
# mysqldump --opt nova > nova.sql

#!/bin/bash
backup_dir="/var/lib/backups/mysql"
filename="${backup_dir}/mysql-`hostname`-`eval date +%Y%m%d`.sql.gz"
# Dump the entire MySQL database
/usr/bin/mysqldump --opt --all-databases | gzip > $filename
# Delete backups older than 7 days
find $backup_dir -ctime +7 -type f -delete

File System Backups

<compute>
/etc/nova
/var/lib/nova

<Image Catalog and Delivery>
/etc/glance
/var/log/glance
/var/lib/glance
/var/lib/glance/images => RAID array / to use a tool such as rsync to replicate the images to another server
(# rsync -az --progress /var/lib/glance/images backup-server:/var/lib/glance/images/)

<Identity>
/etc/keystone
/var/log/keystone
/var/lib/keystone

<Block Storage>
/etc/cinder
/var/log/cinder
/var/lib/cinder

<Object Storage>
/etc/swift

Recovering Backups

Recovering backups is a fairly simple process. To begin, first ensure that the service you are recovering is not running. For example, to do a full recovery of nova on the cloud controller, first stop all nova services:

 Select Text
# stop nova-api
# stop nova-cert
# stop nova-consoleauth
# stop nova-novncproxy
# stop nova-objectstore
# stop nova-scheduler
Now you can import a previously backed-up database:

Select Text
# mysql nova < nova.sql
You can also restore backed-up nova directories:

Select Text
# mv /etc/nova{,.orig}
# cp -a /path/to/backup/nova /etc/
Once the files are restored, start everything back up:

Select Text
# start mysql
# for i in nova-api nova-cert nova-consoleauth nova-novncproxy
nova-objectstore nova-scheduler
> do
> start $i
> done
Other services follow the same process, with their respective directories and databases.

 Summary

Backup and subsequent recovery is one of the first tasks system administrators learn. However, each system has different items that need attention. By taking care of your database, image service, and appropriate file system locations, you can be assured that you can handle any event requiring recovery.

--------------------------------------------
Maintenance
--------------------------------------------
http://docs.openstack.org/openstack-ops/content/maintenance.html


--------------------------------------------
check
--------------------------------------------
- backup, restore
- creating windows os image 
- change ip range during service is online
- append or detach disk on instance

--------------------------------------------
issue
--------------------------------------------
invalid command "FcgidIPCDir"

==> yum install php-cli

--------------------------------------------
script
--------------------------------------------
source keystonerc_admin
mysql -uroot < mysql-localhost.localdomain-20150814.sql

#!/usr/bin/expect -f

set SRV 192.168.0.150
set timeout 120
spawn rsync -avz -e ssh root@${SRV}:/etc/nova/* /etc/nova/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/var/lib/nova/* /var/lib/nova/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/etc/glance/* /etc/glance/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/var/lib/glance/* /var/lib/glance/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/etc/keystone/* /etc/keystone
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/var/lib/keystone/* /var/lib/keystone/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/etc/cinder/* /etc/cinder/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof

spawn rsync -avz -e ssh root@${SRV}:/var/lib/cinder/* /var/lib/cinder/
expect {
 -re "password: " {
        send "PWD\r"
 }
}
expect eof
